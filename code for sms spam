import numpy as np
import pandas as pd

import re
from nltk.stem import PorterStemmer
from nltk.tokenize import word_tokenize

from sklearn.preprocessing import LabelEncoder
from sklearn.model_selection import train_test_split

from sklearn.svm import SVC
from sklearn.metrics import f1_score
data = pd.read_csv('../input/sms-spam-collection-dataset/spam.csv', encoding='latin-1')
data
v1	v2	Unnamed: 2	Unnamed: 3	Unnamed: 4
0	ham	Go until jurong point, crazy.. Available only ...	NaN	NaN	NaN
1	ham	Ok lar... Joking wif u oni...	NaN	NaN	NaN
2	spam	Free entry in 2 a wkly comp to win FA Cup fina...	NaN	NaN	NaN
3	ham	U dun say so early hor... U c already then say...	NaN	NaN	NaN
4	ham	Nah I don't think he goes to usf, he lives aro...	NaN	NaN	NaN
...	...	...	...	...	...
5567	spam	This is the 2nd time we have tried 2 contact u...	NaN	NaN	NaN
5568	ham	Will Ì_ b going to esplanade fr home?	NaN	NaN	NaN
5569	ham	Pity, * was in mood for that. So...any other s...	NaN	NaN	NaN
5570	ham	The guy did some bitching but I acted like i'd...	NaN	NaN	NaN
5571	ham	Rofl. Its true to its name	NaN	NaN	NaN
5572 rows × 5 columns

data.drop([data.columns[col] for col in [2,3,4]], axis=1, inplace=True)
data
v1	v2
0	ham	Go until jurong point, crazy.. Available only ...
1	ham	Ok lar... Joking wif u oni...
2	spam	Free entry in 2 a wkly comp to win FA Cup fina...
3	ham	U dun say so early hor... U c already then say...
4	ham	Nah I don't think he goes to usf, he lives aro...
...	...	...
5567	spam	This is the 2nd time we have tried 2 contact u...
5568	ham	Will Ì_ b going to esplanade fr home?
5569	ham	Pity, * was in mood for that. So...any other s...
5570	ham	The guy did some bitching but I acted like i'd...
5571	ham	Rofl. Its true to its name
5572 rows × 2 columns

encoder=LabelEncoder()

data['v1']=encoder.fit_transform(data['v1'])
class_mappings={index:label for index, label in enumerate(encoder.classes_)}
class_mappings
{0: 'ham', 1: 'spam'}
data
v1	v2
0	0	Go until jurong point, crazy.. Available only ...
1	0	Ok lar... Joking wif u oni...
2	1	Free entry in 2 a wkly comp to win FA Cup fina...
3	0	U dun say so early hor... U c already then say...
4	0	Nah I don't think he goes to usf, he lives aro...
...	...	...
5567	1	This is the 2nd time we have tried 2 contact u...
5568	0	Will Ì_ b going to esplanade fr home?
5569	0	Pity, * was in mood for that. So...any other s...
5570	0	The guy did some bitching but I acted like i'd...
5571	0	Rofl. Its true to its name
5572 rows × 2 columns

def processEmail(contents):
    ps=PorterStemmer() # Take an email string and convert it to a list of stemmed words
    
    contents=contents.lower()
    contents=re.sub(r'<[^<>]+>',' ', contents) #replace html tag with space
    contents = re.sub(r'[0-9]+', 'number', contents) #replace all numbers with 'number'
    contents = re.sub(r'(http|https)://[^\s]*', 'httpaddr', contents) #url till whitespace conv to 'httpaddr'
    contents = re.sub(r'[^\s]+@[^\s]+', 'emailaddr', contents) #email same way
    contents = re.sub(r'[$]+', 'dollar', contents) #same with dollar
                      
    words=word_tokenize(contents)            
    
    for i in range(len(words)):
                      words[i]=re.sub(r'[^a-zA-Z0-9]', '', words[i])
                      words[i]=ps.stem(words[i])
                      
    words=[word for word in words if len(word)>=1]
    return words
processEmail("anyone knows how much it costs")
processEmail("hi would <i>you</i>  Like my Email Addres$? it's burt.bees@gmail.com")
['hi',
 'would',
 'you',
 'like',
 'my',
 'email',
 'addresdollar',
 'it',
 's',
 'emailaddr']
# Take a list of emails and get a dictionary of the most common words

def getVocabulary(emails,vocab_length):
    vocabulary=dict()
    
    for i in range(len(emails)):
        emails[i]=processEmail(emails[i])
        for word in emails[i]:
            if word in vocabulary.keys():
                vocabulary[word]+=1
            else:
                vocabulary[word]=1
                    
    vocabulary=sorted(vocabulary.items(),key=lambda x:x[1],reverse=True)
    vocabulary=list(map(lambda x:x[0],vocabulary[0:vocab_length]))
    vocabulary={index:word for index, word in enumerate(vocabulary)}
    
    return vocabulary
def getKey(dictionary,val):
    for key,value in dictionary.items():
        if value==val:
            return key
def getIndices(email,vocabulary):
    word_indices=set()
    
    for word in email:
        if word in vocabulary.values():
            word_indices.add(getKey(vocabulary,word))
            
    return word_indices
def getFeatureVector(word_indices,vocab_length):
    feature_vec=np.zeros(vocab_length)
    
    for i in word_indices:
        feature_vec[i]=1
        
    return feature_vec
vocab_length=2000
vocabulary = getVocabulary(data['v2'].to_list(), vocab_length)

emails = data['v2'].to_list()
emails = list(map(lambda x: processEmail(x), emails))
X = list(map(lambda x: getFeatureVector(getIndices(x, vocabulary), vocab_length), emails))
X = pd.DataFrame(np.array(X).astype(np.int16))
y = data['v1']
X_train, X_test, y_train, y_test = train_test_split(X, y, train_size=0.8)
model = SVC()

model.fit(X_train, y_train)

SVC
SVC()
model.score(X_test, y_test)
0.9838565022421525
y_pred = model.predict(X_test)
f1_score(y_test, y_pred)
0.9361702127659575
